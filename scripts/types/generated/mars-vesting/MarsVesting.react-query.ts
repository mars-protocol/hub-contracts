// @ts-nocheck
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, Schedule, ExecuteMsg, QueryMsg, Uint128, PositionResponse, ArrayOfPositionResponse, VotingPowerResponse, ArrayOfVotingPowerResponse } from "./MarsVesting.types";
import { MarsVestingQueryClient, MarsVestingClient } from "./MarsVesting.client";
export const marsVestingQueryKeys = {
  contract: ([{
    contract: "marsVesting"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...marsVestingQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marsVestingQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  votingPower: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marsVestingQueryKeys.address(contractAddress)[0],
    method: "voting_power",
    args
  }] as const),
  votingPowers: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marsVestingQueryKeys.address(contractAddress)[0],
    method: "voting_powers",
    args
  }] as const),
  position: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marsVestingQueryKeys.address(contractAddress)[0],
    method: "position",
    args
  }] as const),
  positions: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marsVestingQueryKeys.address(contractAddress)[0],
    method: "positions",
    args
  }] as const)
};
export interface MarsVestingReactQuery<TResponse, TData = TResponse> {
  client: MarsVestingQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface MarsVestingPositionsQuery<TData> extends MarsVestingReactQuery<ArrayOfPositionResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useMarsVestingPositionsQuery<TData = ArrayOfPositionResponse>({
  client,
  args,
  options
}: MarsVestingPositionsQuery<TData>) {
  return useQuery<ArrayOfPositionResponse, Error, TData>(marsVestingQueryKeys.positions(client?.contractAddress, args), () => client ? client.positions({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarsVestingPositionQuery<TData> extends MarsVestingReactQuery<PositionResponse, TData> {
  args: {
    user: string;
  };
}
export function useMarsVestingPositionQuery<TData = PositionResponse>({
  client,
  args,
  options
}: MarsVestingPositionQuery<TData>) {
  return useQuery<PositionResponse, Error, TData>(marsVestingQueryKeys.position(client?.contractAddress, args), () => client ? client.position({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarsVestingVotingPowersQuery<TData> extends MarsVestingReactQuery<ArrayOfVotingPowerResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useMarsVestingVotingPowersQuery<TData = ArrayOfVotingPowerResponse>({
  client,
  args,
  options
}: MarsVestingVotingPowersQuery<TData>) {
  return useQuery<ArrayOfVotingPowerResponse, Error, TData>(marsVestingQueryKeys.votingPowers(client?.contractAddress, args), () => client ? client.votingPowers({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarsVestingVotingPowerQuery<TData> extends MarsVestingReactQuery<VotingPowerResponse, TData> {
  args: {
    user: string;
  };
}
export function useMarsVestingVotingPowerQuery<TData = VotingPowerResponse>({
  client,
  args,
  options
}: MarsVestingVotingPowerQuery<TData>) {
  return useQuery<VotingPowerResponse, Error, TData>(marsVestingQueryKeys.votingPower(client?.contractAddress, args), () => client ? client.votingPower({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarsVestingConfigQuery<TData> extends MarsVestingReactQuery<InstantiateMsg, TData> {}
export function useMarsVestingConfigQuery<TData = InstantiateMsg>({
  client,
  options
}: MarsVestingConfigQuery<TData>) {
  return useQuery<InstantiateMsg, Error, TData>(marsVestingQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarsVestingTransferOwnershipMutation {
  client: MarsVestingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarsVestingTransferOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarsVestingTransferOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarsVestingTransferOwnershipMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transferOwnership(fee, memo, funds), options);
}
export interface MarsVestingWithdrawMutation {
  client: MarsVestingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarsVestingWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarsVestingWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarsVestingWithdrawMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(fee, memo, funds), options);
}
export interface MarsVestingTerminatePositionMutation {
  client: MarsVestingClient;
  msg: {
    user: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarsVestingTerminatePositionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarsVestingTerminatePositionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarsVestingTerminatePositionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.terminatePosition(msg, fee, memo, funds), options);
}
export interface MarsVestingCreatePositionMutation {
  client: MarsVestingClient;
  msg: {
    user: string;
    vestSchedule: Schedule;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarsVestingCreatePositionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarsVestingCreatePositionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarsVestingCreatePositionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createPosition(msg, fee, memo, funds), options);
}
// @ts-nocheck
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, Schedule, ExecuteMsg, ConfigForString, QueryMsg, Uint128, PositionResponse, ArrayOfPositionResponse, VotingPowerResponse, ArrayOfVotingPowerResponse } from "./MarsVesting.types";
export interface MarsVestingReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigForString>;
  votingPower: ({
    user
  }: {
    user: string;
  }) => Promise<VotingPowerResponse>;
  votingPowers: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfVotingPowerResponse>;
  position: ({
    user
  }: {
    user: string;
  }) => Promise<PositionResponse>;
  positions: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfPositionResponse>;
}
export class MarsVestingQueryClient implements MarsVestingReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.votingPower = this.votingPower.bind(this);
    this.votingPowers = this.votingPowers.bind(this);
    this.position = this.position.bind(this);
    this.positions = this.positions.bind(this);
  }

  config = async (): Promise<ConfigForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  votingPower = async ({
    user
  }: {
    user: string;
  }): Promise<VotingPowerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      voting_power: {
        user
      }
    });
  };
  votingPowers = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfVotingPowerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      voting_powers: {
        limit,
        start_after: startAfter
      }
    });
  };
  position = async ({
    user
  }: {
    user: string;
  }): Promise<PositionResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      position: {
        user
      }
    });
  };
  positions = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfPositionResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      positions: {
        limit,
        start_after: startAfter
      }
    });
  };
}
export interface MarsVestingInterface extends MarsVestingReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    newCfg
  }: {
    newCfg: ConfigForString;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  createPosition: ({
    user,
    vestSchedule
  }: {
    user: string;
    vestSchedule: Schedule;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  terminatePosition: ({
    user
  }: {
    user: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MarsVestingClient extends MarsVestingQueryClient implements MarsVestingInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.createPosition = this.createPosition.bind(this);
    this.terminatePosition = this.terminatePosition.bind(this);
    this.withdraw = this.withdraw.bind(this);
  }

  updateConfig = async ({
    newCfg
  }: {
    newCfg: ConfigForString;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        new_cfg: newCfg
      }
    }, fee, memo, funds);
  };
  createPosition = async ({
    user,
    vestSchedule
  }: {
    user: string;
    vestSchedule: Schedule;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_position: {
        user,
        vest_schedule: vestSchedule
      }
    }, fee, memo, funds);
  };
  terminatePosition = async ({
    user
  }: {
    user: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      terminate_position: {
        user
      }
    }, fee, memo, funds);
  };
  withdraw = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {}
    }, fee, memo, funds);
  };
}
// @ts-nocheck
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, Config } from "./MarsDelegator.types";
import { MarsDelegatorQueryClient, MarsDelegatorClient } from "./MarsDelegator.client";
export const marsDelegatorQueryKeys = {
  contract: ([{
    contract: "marsDelegator"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...marsDelegatorQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marsDelegatorQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const)
};
export interface MarsDelegatorReactQuery<TResponse, TData = TResponse> {
  client: MarsDelegatorQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface MarsDelegatorConfigQuery<TData> extends MarsDelegatorReactQuery<Config, TData> {}
export function useMarsDelegatorConfigQuery<TData = Config>({
  client,
  options
}: MarsDelegatorConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(marsDelegatorQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarsDelegatorRefundMutation {
  client: MarsDelegatorClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarsDelegatorRefundMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarsDelegatorRefundMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarsDelegatorRefundMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.refund(fee, memo, funds), options);
}
export interface MarsDelegatorUnbondMutation {
  client: MarsDelegatorClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarsDelegatorUnbondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarsDelegatorUnbondMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarsDelegatorUnbondMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unbond(fee, memo, funds), options);
}
export interface MarsDelegatorBondMutation {
  client: MarsDelegatorClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarsDelegatorBondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarsDelegatorBondMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarsDelegatorBondMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.bond(fee, memo, funds), options);
}